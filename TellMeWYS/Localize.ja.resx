<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountName" xml:space="preserve">
    <value>アカウント名</value>
  </data>
  <data name="AccountType" xml:space="preserve">
    <value>アカウント種別</value>
  </data>
  <data name="AddMember" xml:space="preserve">
    <value>メンバーの追加</value>
  </data>
  <data name="BackToList" xml:space="preserve">
    <value>リストに戻る</value>
  </data>
  <data name="ChannelName" xml:space="preserve">
    <value>チャンネル名</value>
  </data>
  <data name="ClientPort" xml:space="preserve">
    <value>クライアントポート番号</value>
  </data>
  <data name="CreateChannel" xml:space="preserve">
    <value>チャンネルを作成</value>
  </data>
  <data name="DeleteThisChannel" xml:space="preserve">
    <value>このチャンネルを削除</value>
  </data>
  <data name="EditChannelName" xml:space="preserve">
    <value>チャンネル名の変更</value>
  </data>
  <data name="Example" xml:space="preserve">
    <value>例</value>
  </data>
  <data name="Home_Description" xml:space="preserve">
    <value>このサイトは何か?
-----------------

このサイトは、あなたのWebサイトにおける電話サポートを支援する目的のものです。

あなたのWebサイトに滞在している顧客からの操作によって、このサイトを介して、今その顧客が開いている **URL を知ったり、開いているページのスクリーンショットを得る** ことができるようになります。</value>
  </data>
  <data name="Home_GotoChannelList" xml:space="preserve">
    <value>チャンネルリストへ移動</value>
  </data>
  <data name="Home_Preparation" xml:space="preserve">
    <value>準備
-----------
1. Microsoft または Google アカウントでサインインします。(無料です)
2. "チャンネル" を作成し, 設定ページから JavaScript ファイルの URL を入手します。
3. その JavaScript ファイルを読み込むよう、あなたのWebサイトに設置し、,
4. そして何かのUI要素 (例えば "Help Me!" ボタンのような) のクリックイベントをハンドルして "tellMeWYS.sendUrl()" および "tellMeWYS.sendScreen()" メソッドを呼び出すようにします。</value>
  </data>
  <data name="Home_SignIn_SignUp" xml:space="preserve">
    <value>サインイン / サインアップ (無料)</value>
  </data>
  <data name="JavaScriptLibrary" xml:space="preserve">
    <value>JavaScript ライブラリ</value>
  </data>
  <data name="JS_Example_Call" xml:space="preserve">
    <value>そうすると、次の JavaScript コードを呼び出すことができます。</value>
  </data>
  <data name="JS_Example_IncludeJavaScriptLikeThis" xml:space="preserve">
    <value>以下のように JavaScript を読み込みます:</value>
  </data>
  <data name="ListeningMessages" xml:space="preserve">
    <value>メッセージを待機中...</value>
  </data>
  <data name="Members" xml:space="preserve">
    <value>メンバー</value>
  </data>
  <data name="OpenTestDrivePage" xml:space="preserve">
    <value>テストページを開く</value>
  </data>
  <data name="OtherActions" xml:space="preserve">
    <value>その他の操作</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>オーナー</value>
  </data>
  <data name="RemoveMember" xml:space="preserve">
    <value>メンバーを削除</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>設定</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>サインイン</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>サインアウト</value>
  </data>
  <data name="YourChannels" xml:space="preserve">
    <value>チャンネルリスト</value>
  </data>
  <data name="Home_HowToTry" xml:space="preserve">
    <value>試すには?
-----------

まずこのサイトにサインインし、"チャンネル" を作成します。

そして "チャンネル" ページを開くと、「テストページを開く」リンクがあります。

「テストページを開く」リンクをクリックして、テストページを別のタブまたはウィンドウに開いてください。</value>
  </data>
  <data name="Home_Usage" xml:space="preserve">
    <value>使い方
-----
ユーザーからサポート依頼の電話がかかってきたら...

1. このサイトにサインインし、"チャンネル" ページを開いて URL のメッセージを受信待機します。
2. ユーザーに、あらかじめ "sendUrl" または "sendScreen" メソッド呼び出しを仕掛けておいた UI 要素をクリックしてもらうよう伝えます。
3. ユーザーがそのUI要素をクリックして、 "window.tellMeWYS.sendUrl()" または "window.tellMeWYS.sendScreen()" が呼び出されると、**そのユーザーが今開いているページの URL またはページのスクリーンショットが、"チャンネル" ページに現れます!**
4. "チャンネル" ページに現れた URLをクリックすれば、ユーザーが現在開いているのと同じページを開くことができます。</value>
  </data>
  <data name="JumpToSamplePage" xml:space="preserve">
    <value>サンプルページ {0} に移動</value>
  </data>
  <data name="NoTitle" xml:space="preserve">
    <value>(無題)</value>
  </data>
  <data name="SendURLandScreen" xml:space="preserve">
    <value>URL と画面スナップショットを送信</value>
  </data>
  <data name="TestDrivePage" xml:space="preserve">
    <value>テストページ</value>
  </data>
  <data name="ThisIsSamplePage" xml:space="preserve">
    <value>これはサンプルページ {0} です</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>キャンセル</value>
  </data>
  <data name="Sure" xml:space="preserve">
    <value>よろしいですか?</value>
  </data>
  <data name="ChannelDeleted" xml:space="preserve">
    <value>チャンネルを削除しました。</value>
  </data>
  <data name="SignedOut" xml:space="preserve">
    <value>サインアウトしました。</value>
  </data>
</root>