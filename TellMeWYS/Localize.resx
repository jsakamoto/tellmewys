<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountName" xml:space="preserve">
    <value>Account Name</value>
  </data>
  <data name="AccountType" xml:space="preserve">
    <value>Account Type</value>
  </data>
  <data name="AddMember" xml:space="preserve">
    <value>Add member</value>
  </data>
  <data name="BackToList" xml:space="preserve">
    <value>Back to list</value>
  </data>
  <data name="ChannelName" xml:space="preserve">
    <value>Channel Name</value>
  </data>
  <data name="ClientPort" xml:space="preserve">
    <value>Client Port</value>
  </data>
  <data name="CreateChannel" xml:space="preserve">
    <value>Create Channel</value>
  </data>
  <data name="DeleteThisChannel" xml:space="preserve">
    <value>Delete this channel</value>
  </data>
  <data name="EditChannelName" xml:space="preserve">
    <value>Edit channel name</value>
  </data>
  <data name="Example" xml:space="preserve">
    <value>Example</value>
  </data>
  <data name="Home_Description" xml:space="preserve">
    <value>What's this site?
-----------------

This site aimed at helping telefhone supporter for your web site.

You can get the URL that your customer on your web site visiting now via this site by customer's action.</value>
  </data>
  <data name="Home_GotoChannelList" xml:space="preserve">
    <value>Goto Your Channel List</value>
  </data>
  <data name="Home_HowToTry" xml:space="preserve">
    <value>How to try?
-----------

At first, sign in this site, and create "Channel".

After this, open "Channel" page, then you can see "Open Test Drive Page" link.

click "Open Test Drive Page" link to open the test drive page in new tab or window.</value>
  </data>
  <data name="Home_Preparation" xml:space="preserve">
    <value>Preparation
-----------
1. Sign in with Microsoft or Google account. (It's Free, No purchase.)
2. Create "Channel", and get the URL of the JavaScript file that provide small function at settings page.
3. Embed the including the JavaScript file that you got at "Channel" setting page into your web site,
4. and handle the click event any UI element (such as "Help Me!" button) and call "window.tellMeWYS.sendUrl()".</value>
  </data>
  <data name="Home_SignIn_SignUp" xml:space="preserve">
    <value>Sign In / Sign Up (Free)</value>
  </data>
  <data name="Home_Usage" xml:space="preserve">
    <value>Usage
-----
One day, when you recieve the call from your customers to help them...

1. Sign in this site and open "Channel" page for listen to the messages from your web site.
2. Ask them to click the UI elemet that you wired up the code of calling "sendUrl" method.
3. If your customer click the elemnt, and fire "window.tellMeWYS.sendUrl()", then the URL ot the page that your customer opend now appear at "Channel" page!
4.You can click the URL on "Channel" page, then open the web page that the same of your customer seeing now.</value>
  </data>
  <data name="JavaScriptLibrary" xml:space="preserve">
    <value>JavaScript Library</value>
  </data>
  <data name="JS_Example_Call" xml:space="preserve">
    <value>Then, you can call follow JavaScript code.</value>
  </data>
  <data name="JS_Example_IncludeJavaScriptLikeThis" xml:space="preserve">
    <value>Include JavaScript into your web site like this:</value>
  </data>
  <data name="ListeningMessages" xml:space="preserve">
    <value>Listening messages...</value>
  </data>
  <data name="Members" xml:space="preserve">
    <value>Members</value>
  </data>
  <data name="OpenTestDrivePage" xml:space="preserve">
    <value>Open Test Drive page</value>
  </data>
  <data name="OtherActions" xml:space="preserve">
    <value>Other actions</value>
  </data>
  <data name="Owner" xml:space="preserve">
    <value>Owner</value>
  </data>
  <data name="RemoveMember" xml:space="preserve">
    <value>Remove member</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SignIn" xml:space="preserve">
    <value>Sign in</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>Sign out</value>
  </data>
  <data name="SiteName" xml:space="preserve">
    <value>Tell Me WYS</value>
  </data>
  <data name="YourChannels" xml:space="preserve">
    <value>Your Channels</value>
  </data>
  <data name="JumpToSamplePage" xml:space="preserve">
    <value>Jump to sample page {0}</value>
  </data>
  <data name="NoTitle" xml:space="preserve">
    <value>(No Title)</value>
  </data>
  <data name="SendURL" xml:space="preserve">
    <value>Send URL</value>
  </data>
  <data name="TestDrivePage" xml:space="preserve">
    <value>Test Drive Page</value>
  </data>
  <data name="ThisIsSamplePage" xml:space="preserve">
    <value>This is sample page {0}</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Sure" xml:space="preserve">
    <value>Sure?</value>
  </data>
</root>